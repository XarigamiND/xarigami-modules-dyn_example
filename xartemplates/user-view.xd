<xar:comment> License: GPL http://www.gnu.org/copyleft/gpl.html </xar:comment>
<div class="xar-mod-page">
    <div class="xar-mod-head">
        <xar:comment>Only show the menus if this is NOT an ajax request</xar:comment>
        <xar:if condition="!xarRequestIsAJAX()">
            <xar:template type="module" module="base" file="user-menu" />
        </xar:if>
    </div>
     <div class="xar-mod-body">
        <h1><xar:mlstring>View Dynamic Data Example</xar:mlstring></h1>
        <div class="xar-mod-content">
            <h3><xar:mlstring>APPROACH # 1a : the &lt;xar:data-view ...&gt; tag</xar:mlstring></h3>
           <p>
                <xar:mlstring>
                    This tag will automatically retrieve the list of items from DynamicData,
                    and present them according to its standard <strong>objects/showview.xd</strong> template.
                </xar:mlstring>
           </p>
            <xar:data-view module="dyn_example" itemtype="0" catid="$catid" numitems="$itemsperpage" startnum="$startnum" sort="$sort" sortorder="$sortorder" />
            <p>
                <xar:mlstring>
                    If you want to provide your own presentation here, you can specify a
                    different <code>layout="..."</code> to use in the default template, or you can specify your
                    own <code>template="..."</code> here as well.
                </xar:mlstring>
            </p>

            <h3><xar:mlstring>APPROACH # 1b : the &lt;xar:data-view ...&gt; tag with parameters</xar:mlstring></h3>
            <p>
                <xar:mlstring>
                    Here's an example that uses the <code>layout="list"</code>, and <code>linkfield="name"</code>
                    to tell DynamicData which field should be linked to a display of the item. It also
                    uses <code>fieldlist="name,age"</code> to show only a selected list of fields.
                </xar:mlstring>
            </p>

            <xar:data-view module="dyn_example" itemtype="0" catid="$catid" numitems="$itemsperpage" startnum="$startnum" layout="list" linkfield="name" sort="$sort" sortorder="$sortorder"  fieldlist="name,age" />

            <h3><xar:mlstring>APPROACH # 2 : the &lt;xar:data-getitems ...&gt; tag</xar:mlstring></h3>

            <p>
                <xar:mlstring>
                    This tag will retrieve the properties and values from DynamicData and
                    make them available in the 'properties' and 'values' variables in your template.
                </xar:mlstring>
            </p>

            <p>
                <xar:mlstring>
                    You can then use those variables to build your own layout.
                    The <code>&lt;xar:data-label ...&gt;</code> and <code>&lt;xar:data-output ...&gt;</code> tags
                     allow you to show individual labels or value outputs in the template.
                </xar:mlstring>
            </p>

            <p>
                <xar:mlstring>
                    See the admin list for an example... We'll skip this one here, since we'll be
                    retrieving 'properties' and 'values' via the module code instead, with the next approach.
                </xar:mlstring>
            </p>

            <!--xar:data-getitems name="$properties" value="$values" module="dyn_example" itemtype="0" catid="$catid" numitems="$itemsperpage" startnum="$startnum" /-->
            <h3><xar:mlstring>APPROACH # 3 : getting the object list via API</xar:mlstring></h3>

            <p>
                <xar:mlstring>After retrieving the object list via API, you can pass along the whole
                object list to the template and use <code>&lt;xar:data-view object="$mylist" /&gt;</code> to let DynamicData
                handle the view. Or you can use <code>&lt;xar:data-view object="$mylist" tplmodule="dyn_example" /&gt;</code>
                if you want to provide your own view template in this module :</xar:mlstring>
            </p>

            <xar:data-view object="$mylist" tplmodule="dyn_example" layout="list" sort="$sort" sortorder="$sortorder" />

            <p><xar:mlstring>or you can pass along the properties and values and work like in APPROACH # 2.</xar:mlstring></p>

            <xar:foreach in="$values" key="$itemid" value="$fields">
                <table class="xar-fullwidth xar-noborder" cellspacing="1" cellpadding="2">
                  <xar:foreach in="$fields" key="$name" value="$value">
                    <tr>
                      <td class="xar-align-right xar-valign-top xar-alt" width="15%">
                          <xar:data-label property="$properties[$name]" /> :
                      </td>
                      <td>
                          <xar:data-output property="$properties[$name]" value="$value" />
                      </td>
                    </tr>
                  </xar:foreach>
                  <tr>
                    <td class="xar-align-right xar-valign-top xar-alt">&nbsp;</td>
                    <td><a href="&xar-modurl-dyn_example-user-display;&amp;itemid=#$itemid#"><xar:mlstring>Display</xar:mlstring></a></td>
                  </tr>
                </table>
            </xar:foreach>


            <h3><xar:mlstring>APPROACH # 4 : getting the raw item values via API</xar:mlstring></h3>

            <p>
                <xar:mlstring>Here you'll have to handle the output format of the values yourself - in the module code and/or template...</xar:mlstring>

            </p>
           <xar:foreach in="$items" key="$itemid" value="$fields">

                <table class="xar-fullwidth xar-noborder" cellspacing="1" cellpadding="2">
                  <xar:foreach in="$fields" key="$name" value="$value">
                    <tr>
                      <td class="xar-align-right xar-valign-top xar-alt" width="15%">#$labels[$name]# :</td>
                      <td>#$value#</td>
                    </tr>
                  </xar:foreach>
                  <tr>
                    <td class="xar-align-right xar-valign-top xar-alt">&nbsp;</td>
                    <td><a href="&xar-modurl-dyn_example-user-display;&amp;itemid=#$itemid#"><xar:mlstring>Display</xar:mlstring></a></td>
                  </tr>
                </table>
            </xar:foreach>
        </div>
    </div>
</div>