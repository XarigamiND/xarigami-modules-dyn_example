<xar:comment> License: GPL http://www.gnu.org/copyleft/gpl.html </xar:comment>
<!-- common admin menu for this module - remove link to the current function -->
<div class="xar-mod-page">
    <div class="xar-mod-head">
         <xar:comment>Common module menu - only show the menus if this is NOT an ajax request</xar:comment>
        <xar:if condition="!xarRequestIsAJAX()">
            <xar:template type="module" module="base" file="admin-menu" />
        </xar:if>
    </div>
    <div class="xar-mod-body">
        <xar:comment> the specific template content for the current admin function comes here </xar:comment>
        <h1><xar:mlstring>Modify default configuration</xar:mlstring></h1>
        <div class="xar-mod-content">
              <p class="xar-form-input-before">
                  <xar:mlstring>This uses dynamic module settings, i.e. you can add/remove settings for
                      your module dynamically too. But you could use the 'normal' hard-coded approach
                      here as well...
                  </xar:mlstring>
              </p>

            <form method="post" action="&xar-modurl-dyn_example-admin-updateconfig;">
              <fieldset>
                <legend><xar:mlstring>Modify Configuration</xar:mlstring></legend>
                <xar:data-form module="modules" itemtype="66" itemid="1" />
              </fieldset>
                #$hooks#
              <div class="xar-form-input-after">
                <input type="hidden" name="authid" value="#xarSecGenAuthKey('dyn_example')#" />
                <input type="hidden" name="modid" value="#xarModGetIDFromName('modules')#" />
                <input type="hidden" name="itemtype" value="#xarModGetIDFromName('dyn_example')#" />
                <input type="hidden" name="itemid" value="1" />
                <input type="hidden" name="return_url" value="#xarServerGetCurrentURL()#" />
                <input type="submit" value="#$submitlabel#" />
              </div>
            </form>

            <p class="xar-form-input-wrapper-before">
            <em><xar:mlstring>Note : your users will only be able to override those settings that you make available as user settings</xar:mlstring></em>
            </p>
            <br />
            <h2><xar:mlstring>Dynamic Data Configuration</xar:mlstring></h2>

            <h3><xar:mlstring>Dynamic Example</xar:mlstring></h3>
            <xar:set name="extrainfo">array('module' => 'dyn_example', 'itemtype' => 0)</xar:set>
            <xar:module main="false" module="dynamicdata" type="admin" func="modifyconfighook" extrainfo="$extrainfo" />

            <xar:comment>
                The following are only useful if you also make your module variables
                and user settings dynamic (optional)
            </xar:comment>

            <xar:set name="modid">xarModGetIDFromName('dyn_example')</xar:set>

            <h3><xar:mlstring>Module Variables (optional)</xar:mlstring></h3>
            <xar:set name="extrainfo">array('module' => 'modules', 'itemtype' => $modid)</xar:set>
            <xar:module main="false" module="dynamicdata" type="admin" func="modifyconfighook" extrainfo="$extrainfo" />

            <h3><xar:mlstring>User Settings (optional)</xar:mlstring></h3>
            <xar:set name="extrainfo">array('module' => 'roles', 'itemtype' => $modid)</xar:set>
            <xar:module main="false" module="dynamicdata" type="admin" func="modifyconfighook" extrainfo="$extrainfo" />
        </div>
    </div>
</div>