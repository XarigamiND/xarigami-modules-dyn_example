<xar:comment> License: GPL http://www.gnu.org/copyleft/gpl.html </xar:comment>
<div class="xar-mod-page">
    <div class="xar-mod-head">
        <xar:comment>Only show the menus if this is NOT an ajax request</xar:comment>
        <xar:if condition="!xarRequestIsAJAX()">
            <xar:template type="module" module="base" file="user-menu" />
        </xar:if>
    </div>
     <div class="xar-mod-body">
        <h1><xar:mlstring>Display Dynamic Data Example item</xar:mlstring></h1>
        <div class="xar-mod-content">

            <h3><xar:mlstring>APPROACH # 1 : the &lt;xar:data-display ...&gt; tag</xar:mlstring></h3>

            <p>
                <xar:mlstring>This tag will automatically retrieve the item from DynamicData,
                and present it according to its standard <strong>objects/showdisplay.xd</strong> template.</xar:mlstring>
             </p>

            <xar:data-display module="dyn_example" itemtype="0" itemid="$itemid" />

            <p>
                <xar:mlstring>If you want to provide your own presentation here, you can specify a
                different <code>layout="..."</code> to use in the default template, or you can specify your
                own <code>template="..."</code> here as well.</xar:mlstring>
            </p>

            <h3><xar:mlstring>APPROACH # 2 : the &lt;xar:data-getitem ...&gt; tag</xar:mlstring></h3>

            <p>
                <xar:mlstring>This tag will retrieve the properties of this item from DynamicData and
                make them available in the 'properties' variable in your template.</xar:mlstring>
            </p>

            <xar:data-getitem name="$properties" module="dyn_example" itemtype="0" itemid="$itemid" />

            <p>
                <xar:mlstring>You can then use that variable to build your own layout.
                The <code>&lt;xar:data-label ...&gt;</code> and <code>&lt;xar:data-output ...&gt;</code> tags
                allow you to show individual labels or value outputs in the template.</xar:mlstring>
            </p>

            <table class="xar-noborder" cellspacing="1" cellpadding="2">
            <xar:foreach in="$properties" key="$name">
                <tr class="xar-align-left xar-valign-middle">
                    <td class="xar-align-right">
                        <b><xar:data-label property="$properties[$name]" /> :</b>
                    </td>
                    <td class="xar-align-left">
                        <xar:if condition="!empty($is_bold) and $name eq 'name'">
                            <b><xar:data-output property="$properties[$name]" /></b> (<xar:mlstring>let's be bold now</xar:mlstring>)
                        <xar:else />
                            <xar:data-output property="$properties[$name]" />
                        </xar:if>
                    </td>
                </tr>
            </xar:foreach>
            </table>



            <h3><xar:mlstring>APPROACH # 3 : getting the object via API</xar:mlstring></h3>

            <p>
                <xar:mlstring>After retrieving the object via API, you can pass along the whole object to
                the template and use <code>&lt;xar:data-display object="$object" /&gt;</code> to let
                DynamicData handle the display. Or you can use <code>&lt;xar:data-display object="$object" tplmodule="dyn_example" /&gt;</code>
                 if you want to provide your own display template in this module :</xar:mlstring>
            </p>

            <xar:data-display object="$object" tplmodule="dyn_example" />

            <p><xar:mlstring>Otherwise you can pass along the properties and work like in APPROACH # 2.</xar:mlstring></p>
            <h4><xar:mlstring>How to display an Uploads DD property</xar:mlstring></h4>
            <p><xar:mlstring>If you look in the template code this example also shows how you can
                display an Uploads module 'upload' dynamic data property in your template.
                The example uses a dynamic data Upload property called 'myfiles'.
                To see the example install the Uploads module and define an upload dd property called 'myfiles'. </xar:mlstring></p>
            <table class="xar-noborder" cellspacing="1" cellpadding="2">

            <xar:foreach in="$properties" key="$name">
                <xar:if condition="$name eq 'myfiles'">
                    <tr class="xar-align-left xar-valign-middle">
                        <td class="xar-align-right">
                            <b><xar:data-label property="$properties[$name]" /> :</b>
                        </td>
                        <td>
                        <xar:set name="myuploads">$properties[$name]->showOutput();</xar:set>
                            <xar:foreach in="$myuploads" key="$uploadid" value="$myupload">
                                <xar:comment>Show if it is an image</xar:comment>
                                <xar:set name="filetype">#$myupload['fileType']#</xar:set>
                                <xar:if condition="substr($filetype,0,5) eq 'image'">
                                    <img src="#$myupload['fileDownload']#" alt="#$myupload['fileName']#" border="0"/>
                                <xar:else/>
                                    <div class="xar-uploads-icon">
                                        <a href="#$myupload['fileDownload']#" alt="#$myupload['fileName']#" title="#$myupload['DownloadLabel']#">
                                                <img src="#$myupload['mimeImage']#" alt="#$myupload['fileType']#" />
                                                #$myupload['fileName']#
                                        </a>
                                    </div>
                                </xar:if>
                            </xar:foreach>
                        </td>
                    </tr>
                <xar:else />
                    <tr class="xar-align-left xar-valign-middle">
                        <td class="xar-align-right">
                            <b><xar:data-label property="$properties[$name]" /> :</b>
                        </td>
                        <td class="xar-align-left">
                            <xar:if condition="!empty($is_bold) and $name eq 'name'">
                                <b><xar:data-output property="$properties[$name]" /></b> (<xar:mlstring>let's be bold now</xar:mlstring>)
                            <xar:else />
                                <xar:data-output property="$properties[$name]" />
                            </xar:if>
                        </td>
                    </tr>
                </xar:if>
            </xar:foreach>
            </table>


            <h3><xar:mlstring>APPROACH # 4 : getting the raw item values via API</xar:mlstring></h3>

            <p>
                <xar:mlstring>Here you'll have to handle the output format of the values yourself -
                in the module code and/or template...</xar:mlstring>
            </p>

            <table class="xar-fullwidth xar-noborder" cellspacing="1" cellpadding="2">
            <xar:foreach in="$values" key="$name" value="$value">
                <tr class="xar-align-left xar-valign-middle">
                    <td align="right">
                        <b>#$labels[$name]# :</b>
                    </td>
                    <td class="xar-align-left">
                        <xar:if condition="!empty($is_bold) and $name eq 'name'">
                            <b>#$value#</b> (<xar:mlstring>let's be bold now</xar:mlstring>)
                        <xar:else />
                            #$value#
                        </xar:if>
                    </td>
                </tr>
            </xar:foreach>
            </table>

            <p>
                <xar:mlstring>Notice for instance that you don't get the option to automatically display
                the image with <code>&lt;xar:data-output ... &gt;</code> or not here.</xar:mlstring>
            </p>

            <!-- add the output from the different display hooks here -->
            <xar:if condition="!empty($hookoutput)">
               <div class="xar-form-input-wrapper-before">
                <xar:foreach in="$hookoutput" key="$hookmodule">
                    #$hookoutput[$hookmodule]#
                </xar:foreach>
                </div>
            </xar:if>
        </div>
    </div>
</div>
